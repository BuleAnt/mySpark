Spark钨丝计划：让火花（Spark）更接近灯丝（Rare Metal）详解（1）
	1，钨丝计划 产生根本背景
	2，钨丝计划的内幕详解

一：钨丝计划是从Spark项目成立以来，对Spark执行引擎最大一次改进。
它关注于为Spark应用从本质上提升内存和CPU的效率，从而将性能推进到接近现代硬件的极限。这次改进主要包括以下3个举措：
	1，内存管理和二进制处理：借助应用的语义，显式管理内存，消除JVM对象模型和垃圾回收的开销
	2，缓存感知计算：充分利用内存层级算法和数据结构
	3，代码生成：使用代码生成，充分利用现代编译器和CPU**

二：“钨丝计划”产生的本质原因
	1，Spark作为一个一体化多元化的（大）数据处理通用平台，性能一直是其根本性的追求之一，
		Spark基于内存迭代（部分基于磁盘迭代）的模型极大的满足了人们对分布式系统处理性能的渴望，
		但是有Spark是采用Scala+Java语言编写的所以运行在了JVM平台，当然JVM是一个绝对伟大的平台，因为JVM让整个离散的主机融为了一体（网络即OS），
		但是JVM的死穴GC反过来限制了Spark（也就是说平台限制了Spark），
		所以Tungsten聚焦于CPU和Memory使用，以达到对分布式硬件潜能的终极压榨！
	2，对Memory的使用，Tungsten使用了Off-Heap(堆外内存)，也就是在JVM之外的内存空间（这就好像C语言对内存的分配、使用和销毁），是系统级别的，
		此时Spark实现了自己的独立的内存管理，就避免了JVM的GC引发的性能问题，其实还包含避免序列化和反序列化。
	对内存的使用：
		On-Heap：对象在JVM堆中。
		Off-Heap：在JVM堆外从OS层面分配内存，不受JVM管理，不受JVM控制的系统级别。
	3，对于Memory管理方面一个至关重要的内容Cache，
		Tungsten提出了Cache-aware computation，也就是说使用对缓存友好的算法和数据结构来完成数据的存储和复用；
	4，对于CPU而言，Tungsten提出了Code Generation，
		其首先在Spark SQL使用，通过Tungsten要把该功能普及到Spark的所有功能中；

	总结：
	Tungsten的内存管理机制独立于JVM，
	所以Spark操作数据的时候具体操作的是Binary Data，而不是JVM Object！！！
	而且还免去了序列化和反序列化的过程！

三：钨丝计划 内幕详解：
	1，内存管理方面：
		Spark使用了sun.misc.Unsafe来进行Off-heap级别的内存分配、指针使用及内存释放；
		Spark为了统一管理Off-Heap和On-heap而提出了Page。
	2，如果是On-heap的方式，本身是有一个64bit的Object的引用和一个64bit的在Object中的OffSet来指定具体数据的。
	如果是Off-Heap那么就是一个指针直接指向数据。
		Off-Heap：采用C语言的方式，所以指针直接指向数据实体。
		On-heap： 堆内内存空间的时候，GC的时候对堆内结果的重新组织。
	3，On-heap：如果在运行的时候分配Java Object对象，它的地址是不可以改变，
		JVM对内存管理的负担是远远大于实用Off-Heap方式，因为GC的时候会对heap进行相应的重组。
	4，Spark进行了一层抽象，访问数据的时候可能在堆内也可能在堆外，提供了管理器，
		管理器可以根据数据在堆内还是在堆外进行具体的寻址，
		但是从程序运行的角度或者框架的角度来看，是看不见是堆内还是堆外，
		管理器会完成具体地址和寻址到具体数据的映射过程。
	5，Page会针对堆外内存和堆内内存两种情况进行具体的适配。
	6，Page在寻址的时候具体包括两部分，
		一个是什么样的Page，另一个就是OffSet。
	7，如果在Off-heap下，内存就直接是一个64bit的long的指针来指向具体数据。

	8，如果是On-heap下，也就是堆内的情况下，则就会有两部分，
		一部分是64bit的Object的引用，另外一部分是64bit的Object内的Offset来表示我们具体的数据。

	9，这时候在翻译两种不同情况的时候，就要注意该怎么寻址了。
		Off-Heap：如果是一个指针，直接指向数据结构。
		On-heap： GC会导致heap的重新组织。而重组之后要确保Object的地址是不变的。

10，Page是一个Table。
		Page Table的方式来进行内存管理。把内存分为很多页。
		页只是一个单位，和分配数组差不多，具体实现是通过TaskMemoryManager对内存进行管理的，具体是靠allocatePage来分配页。
	内存寻址：
		1.在哪一页，也就是在那个Page.
		2.就是Page的具体偏移。
	内存寻址的工作方式：
		Off-heap：那么内存直接就是用一个64bit的long的指针来指向我们的数据。
		On-heap：那就是堆内，包含两部分，一部分是64bit的引用，另外一部分是64bit的Object的OffSet来表示我们的具体数据。
	地址本身和数据本身之间有一个映射，也就是所谓的逻辑地址，将逻辑地址映射到实际的物理地址，这个是钨丝计划内部的管理机制。
	由于逻辑地址是一个64bit的长整数，它前面的13个bit是第几页，后面的51bit就表示在页内的偏移。
	所以寻址的方式就是先找到那个page,然后根据后面的51bit，所以加上偏移量，就找到了具体的数据在内存的物理地址。
	MemoryLocation：封装了两种逻辑地址寻址的方式。
	1.allocatePage:分配内存页，添加到Page table中，然后去使用它。
		TaskMemoryManager来管理Page，还有管理Off-heap和On-heap的方式
	2， cache aware computation机制
		主要是基于内存的计算，进行的一种优化的方式，
		CPU Cache的时候l1,l2,l3，速度是不同的，那我们提供的cache的一些友好的数据结构，就可以提高cache的命中率。
	3， 提高cache的命中率，怎么做的？
		设计了自己的数据结构，以前要命中具体的cache的时候，其实采用遍历的方式，
		现在加了一个指针不需要遍历，数据要找命中的cache指针的位置已经指向了具体的位置。
		这个时候查询的方式就按照Key和Point对的方式，这时候就不需要遍历随机访问了。
	4， Code Generation机制：
		把已有的代码变成本地的字节，不需要很多的抽象和匹配等。

---------------------------------------------------------------
 “钨丝计划”的shuffle的使用

一：使用Tungsten功能
1， 如果想让您的程序使用Tungsten的功能，可以配置：
Spark.Shuffle.Manager = tungsten-sort
2， DataFrame中自动开启了Tungsten功能。

二：Tungsten-sort base Shuffle writer内幕
1，写数据在内存足够大的情况下是写到Page里面，在Page里面有一条条的Record，如果内存不够的话，会spill到磁盘上，输入数据的时候是循环每个Task中处理的数据Partition的结果，循环的时候会查看是否有内存，一个Page写满之后，才会写下一个Page。

2，如何看内存是否足够呢？
a)系统默认情况下给 shuffleMapTask 最大准备了多少内存空间，默认情况下是ExecutorHeapMemory*0.8*0.2 (spark.shuffle.memoryFraction = 0.2 , spark.shuffle.safeFraction = 0.8)

b)另外一方面是和Task处理的Partition大小紧密相关
写入的过程图：
这里写图片描述

1，mergeSpills的功能是将很多小文件合并成一个大文件。然后加上index文件索引。
2,和Sort Based Shuffle 过程基本一样。
3, 写数据在内存足够大的情况下是写到Page里面，在Page中有一条条的Record，如果内存不够的话会Spill到磁盘中。此过程跟前面讲解Sort base Shuffle writer过程是一样的。
4,基于UnsafeShuffleWriter会有一个类负责将数据写入到Page中。
5, insertRecordIntoSorter: 此方法把records的数据一条一条的写入到输出流。
而输出流是: ByteArrayOutputStream

四：Tungsten-sort base Shuffle Read原理
基本上是复用了Hash Shuffle Read， 在Tungsten下获取数据的类叫做BlockStoreShuffleReader,其底层其实是Pag


1，到底什么是page
2，page具体的两种 实现方式
3，page使用源码详解

一：Tungsten中到底什么是Page？
1， 在Spark其实不存在Page这个类的。Page是一种数据结构(类似于Stack，List等)，从OS层面上讲，Page代表了一个内存块，在Page里面可以存放数据，在OS中会存放很多不同的Page，当要获得数据的时候首先要定位具体是哪个Page中的数据，找到该Page之后从Page中根据特定的规则(例如说数据的offset和length)取出数据。

2，到底什么是Spark中的Page呢？
在阅读源码的时候，细致研究MemoryBlock.Java，MemoryBlock代表了一个Page的对象。
3， 其中：Nullable：可以为空。为什么？Page代表了具体的内存区域以及内存里面具体的数据，Page中的数据可能是On-heap的数据，也可能是Off-heap中的数据。如果是On-heap则有对象，但是Off-heap的话就没有对象。所以用@Nullable，将对象设置为空。
其中offset：偏移量。MemoryBlock封装了Off-heap和On-heap。

这里写图片描述

这里写图片描述

3，On-heap和Off-heap寻址方式：
On-heap：先找到对象，然后再找索引。
Off-heap：根据地址找到索引。

4， Page可以定位到数据，然后又知道数据的偏移量OffSet之后怎么访问数据？这时候需要length，但是length并不知道，所以此时的长度设定为固定的，设置固定长度的length。

二：如何使用Page？
1， 在TaskMemoryManager中，通过封装Page来定位数据，定位的时候如果是On-heap的话，则先找到对象，然后对象中通过offset来具体定位地址，而如果是Off-heap的话，则直接定位。

这里写图片描述

逻辑地址：Pagenumber由13个bit组成，51bit组成Offset
2,如果是On-heap的方式：内存的分配是是由heapMemoryAllocator完成的。

这里写图片描述

long[] array = new long[(int)((size+7)/8)];
内存对齐，array里面都是地址，因为GC的时候对象的地址会发生变化，因此就需要
为了获得对象的引用。也就是对象的地址。
return new MemoryBlock(array, Platform.LONG_ARRAY_OFFSET, size);
//array里面保存的都是地址，而LONG_ARRAY_OFFSET是偏移量，因此二者就可以定位到绝对地址，然后根据size就可以确定数据。

}
3,如果是Off-heap的方式：内存的分配是是由UnsafeMemoryAllocator完成的。
这里写图片描述
// 对象的引用是null
//address是绝对地址

4， 一个关键的问题是如何确定数据呢？这个时候就需要涉及具体的算法。
针对Task是怎么管理内存的？
TaskMemoryManager基于Page的概念屏蔽掉了底层是On-heap或者是Off-heap的概念，使用逻辑地址做指针，通过逻辑地址来具体定位到我们的记录具体在Page中的位置，
逻辑地址的表示：long类型的64bit的一个数字来表示的。

http://blog.csdn.net/erfucun/article/details/52003557