
nginx自动切割访问日志/缓存设置/压缩






Web 访问日志 (access_log) 记录了所有外部客户端对Web服务器的访问行为，包含了客户端IP，访问日期，访问的URL资源，服务器返回的HTTP状态码等重要信息。
一条典型的Web访问日志如下：
112.97.37.90 - - [14/Sep/2013:14:37:39 +0800] "GET / HTTP/1.1" 301 5 "-" "Mozilla/5.0 (Linux; U; Android 2.3.6; zh-cn; Lenovo A326 Build/GRK39F) AppleWebKit/533.1 (KHTML, like Gecko) Version/4.0 Mobile Safari/533.1 MicroMessenger/4.5.1.259" -
要解决问题：
	当网站访问量大后，日志数据就会很多，如果全部写到一个日志文件中去，文件会变得越来越大。
	文件大速度就会慢下来，比如一个文件几百兆。写入日志的时候，会影响操作速度。
	另外，如果我想看看访问日志，一个几百兆的文件，下载下来打开也很慢。
	使用第三方免费的日志分析工具-日志宝，可以上传nginx、apache、iis的日志文件，它们帮助分析网站安全方面。
	毕竟专攻，更加专业。日志宝对上传的文件也是做了大小限制的，不超过50m。
一、以前版本nignx没有自动分开文件存储日志的机制。由于nginx它不会帮你自动分文件保存。所以，需要自己编写脚本来实现。

	shell脚本文件nginx_log_division.sh内容如下：
	niginx_cut_log.sh

	上面shell脚本的原理是：
	先把以前的日志文件移动重命名成一个，目的是就是备份。
	按照上个周一的本日来命名，运行脚本的时候时间点是”2016-09-16”，那么生成文件名称是”xxx.log_20160909.log”。

	在没有执行kill -USR1 `cat ${PID_PATH}`之前，
	即便已经对文件执行了mv命令而改变了文件名称，nginx还是会向新命名的文件” xxx.log_ 20130909”照常写入日志数据的。
	原因在于：linux系统中，内核是根据文件描述符来找文件的。

	对linux文件描述符的理解
	文件描述符是linux内核为每个打开的文件命名的一个整数标识。
	linux内核为每一个进程生成(或者说维护)一个”文件描述符表”，这个文件描述符表记录的是“此进程所打开的文件(进行标识)”。
	在这里的环境中，nginx就是一个运行中的进程，这个进程早就打开了一个日志文件，在文件描述符表是记录了文件的。
	即便日志文件的路径改变了，但是还是能够找到(根据文件描述符表可以定位)。

	当执行命令“kill -USR1 `cat ${pid_path}`”的时候，nginx.pid文件中保存的其实就是一个数字(自己可以打开看一下，我这里是894)，
	nginx 将其主进程的 pid (进程号)写入到了nginx.pid 文件中，所以可以通过cat命令直接拿到其主进程号,直接操作指定的进程号。
		kill  -USR1 `cat ${pid_path}` 就等同于
		kill –USR1 894  #指定发信号(USR1)信号给这个进程编号。
	在linux系统中，linux是通过信号与”正在运行的进程”进行通信的。
	linux系统中，也很多预定义好的信号，像SIGHUP。USR1是用户自定义信号。可以理解为：
	进程自己定义接到这个信号该干嘛(也就是进程编写者自己确定收到这个信号干嘛还是什么都不做都行，完全交给开发人员自己决定)。
	而在nginx中，它自己编写了代码处理当我接到USR1信号的时候，让nginx重新打开日志文件。具体原理如下：

		1、nginx 的主进程收到USR1信号，会重新打开日志文件
			(以nginx配置文件中的日志名称命名,就是配置文件中access_log项所设置的值，如果文件不存在，会自动创建一个新的文件xxx.log)。
		2、然后把日志文件的拥有者改为“工作进程(worker进程)”，
			目的是让worker进程就具备了对日志文件的读写权限（master和worker通常以不同用户运行，所以需要改变拥有者）。
		3、nginx主进程会关闭重名的日志文件
			(也就是刚才使用mv命令重命名成xxx.log_ 20130909.log的文件)，
			并通知工作进程使用新打开的日志文件(刚才主进程打开的文件xxx.log)。
				具体实现上更细化点就是，主进程把USR1信号发给worker，
				worker接到这个信号后，会重新打开日志文件(也就是配置文件中约定的xxx.log)

	定时执行脚本
		设置上面的shell脚本文件加入到定时任务中去。
		crontab是linux下面一个定时任务进程。开机此进程会启动，它每隔一定时间会去自己的列表中看是否有需要执行的任务。

		crontab  -e
		* 04 * * 1 /home/hadoop/Documents/workspaces/idea/mySpark/src/main/shell/nginx_log_cat.sh

		会打开一个文件，加入上面的代码
		格式为 "分 时 日 月 星期几  要执行的shell文件路径"。用*可以理解成“每”,每分钟，每个小时，每个月等等。
		我设置是在周一凌晨4点运行nginx_log_division.sh脚本，脚本的内容就是重新生成一个新的日志文件。

	附：设置nginx日志的配置方法

		log_format  site  '$remote_addr - $remote_user [$time_local] "$request" '
	             '$status $body_bytes_sent "$http_referer" '
	             '"$http_user_agent" $http_x_forwarded_for';
		access_log  /data/wwwlogs/xxxx.com.log  site

		#第二个参数表示使用那个日志格式，为每一个日志格式标识了一个名称，site对应的就是log_format中的名称
		其中，各个字段的含义如下：
			1.$remote_addr 与$http_x_forwarded_for 用以记录客户端的ip地址；
			2.$remote_user ：用来记录客户端用户名称；
			3.$time_local ： 用来记录访问时间与时区；
			4.$request ： 用来记录请求的url与http协议；
			5.$status ： 用来记录请求状态；成功是200，
			6.$body_bytes_s ent ：记录发送给客户端文件主体内容大小；
			7.$http_referer ：用来记录从那个页面链接访问过来的；
			8.$http_user_agent ：记录客户端浏览器的相关信息；
		例如:
		112.97.37.90 - - [14/Sep/2013:14:37:39 +0800] "GET / HTTP/1.1" 301 5 "-" "Mozilla/5.0 (Linux; U; Android 2.3.6; zh-cn; Lenovo A326 Build/GRK39F) AppleWebKit/533.1 (KHTML, like Gecko) Version/4.0 Mobile Safari/533.1 MicroMessenger/4.5.1.259" -

二：缓存设置
	对于站点中不经常修改的静态内容（如图片，JS，CSS），
	可以在服务器中设置expires过期时间，控制浏览器缓存，达到有效减小带宽流量，降低服务器压力的目的。
	以Nginx服务器为例：

		location ~ .*\.(gif|jpg|jpeg|png|bmp|swf)$ {
		     #过期时间为30天，
		     #图片文件不怎么更新，过期可以设大一点，
		     #如果频繁更新，则可以设置得小一点。
		     expires 30d;
		}

		location ~ .*\.(js|css)$ {
		      expires 10d;
		 }

三：Nginx Gzip模块启用和配置指令详解_nginx
	Nginx Gzip模块启用和配置指令详解

	gzip on;
	gzip_min_length  5k;
	gzip_buffers     4 16k;
	gzip_http_version 1.0;
	gzip_comp_level 3;
	gzip_types       text/plain application/x-javascript text/css application/xml text/javascript application/x-httpd-php image/jpeg image/gif image/png;
	gzip_vary on;


Nginx Gzip模块启用和配置指令详解：
	gzip on|off
	默认值: gzip off
	开启或者关闭gzip模块

	gzip_static on|off
	nginx对于静态文件的处理模块
	该模块可以读取预先压缩的gz文件，这样可以减少每次请求进行gzip压缩的CPU资源消耗。
	该模块启用后，nginx首先检查是否存在请求静态文件的gz结尾的文件，如果有则直接返回该gz文件内容。
	为了要兼容不支持gzip的浏览器，启用gzip_static模块就必须同时保留原始静态文件和gz文件。
	这样的话，在有大量静态文件的情况下，将会大大增加磁盘空间。我们可以利用nginx的反向代理功能实现只保留gz文件。
	可以google”nginx gzip_static”了解更多

	gzip_comp_level 4
	默认值：1(建议选择为4)
	gzip压缩比/压缩级别，压缩级别 1-9，级别越高压缩率越大，当然压缩时间也就越长（传输快但比较消耗cpu）。

	gzip_buffers 4 16k
	默认值: gzip_buffers 4 4k/8k
	设置系统获取几个单位的缓存用于存储gzip的压缩结果数据流。
	    例如 4 4k 代表以4k为单位，按照原始数据大小以4k为单位的4倍申请内存。
	    4 8k 代表以8k为单位，按照原始数据大小以8k为单位的4倍申请内存。
	如果没有设置，默认值是申请跟原始数据相同大小的内存空间去存储gzip压缩结果。

	gzip_types mime-type [mime-type …]
	默认值: gzip_types text/html (默认不对js/css文件进行压缩)
	压缩类型，匹配MIME类型进行压缩
	不能用通配符 text/*
	(无论是否指定)text/html默认已经压缩
	设置哪压缩种文本文件可参考 conf/mime.types

	gzip_min_length  1k
	默认值: 0 ，不管页面多大都压缩
	设置允许压缩的页面最小字节数，页面字节数从header头中的Content-Length中进行获取。
	建议设置成大于1k的字节数，小于1k可能会越压越大。 即: gzip_min_length 1024

	gzip_http_version 1.0|1.1

	默认值: gzip_http_version 1.1(就是说对HTTP/1.1协议的请求才会进行gzip压缩)
	识别http的协议版本。由于早期的一些浏览器或者http客户端，可能不支持gzip自解压，用户就会看到乱码，所以做一些判断还是有必要的。
	注：99.99%的浏览器基本上都支持gzip解压了，所以可以不用设这个值,保持系统默认即可。
	假设我们使用的是默认值1.1，如果我们使用了proxy_pass进行反向代理，那么nginx和后端的upstream server之间是用HTTP/1.0协议通信的，如果我们使用nginx通过反向代理做Cache Server，而且前端的nginx没有开启gzip，同时，我们后端的nginx上没有设置gzip_http_version为1.0，那么Cache的url将不会进行gzip压缩

	gzip_proxied [off|expired|no-cache|no-store|private|no_last_modified|no_etag|auth|any] …

	默认值：off
	Nginx作为反向代理的时候启用，开启或者关闭后端服务器返回的结果，匹配的前提是后端服务器必须要返回包含”Via”的 header头。
	off – 关闭所有的代理结果数据的压缩
	expired – 启用压缩，如果header头中包含 “Expires” 头信息
	no-cache – 启用压缩，如果header头中包含 “Cache-Control:no-cache” 头信息
	no-store – 启用压缩，如果header头中包含 “Cache-Control:no-store” 头信息
	private – 启用压缩，如果header头中包含 “Cache-Control:private” 头信息
	no_last_modified – 启用压缩,如果header头中不包含 “Last-Modified” 头信息
	no_etag – 启用压缩 ,如果header头中不包含 “ETag” 头信息
	auth – 启用压缩 , 如果header头中包含 “Authorization” 头信息
	any – 无条件启用压缩

	gzip_vary on

	和http头有关系，加个vary头，给代理服务器用的，有的浏览器支持压缩，有的不支持，所以避免浪费不支持的也压缩，所以根据客户端的HTTP头来判断，是否需要压缩

	gzip_disable “MSIE [1-6].”

	禁用IE6的gzip压缩，又是因为杯具的IE6。当然，IE6目前依然广泛的存在，所以这里你也可以设置为“MSIE [1-5].”
	IE6的某些版本对gzip的压缩支持很不好，会造成页面的假死，今天产品的同学就测试出了这个问题
	后来调试后，发现是对img进行gzip后造成IE6的假死，把对img的gzip压缩去掉后就正常了
	为了确保其它的IE6版本不出问题，所以建议加上gzip_disable的设置

	关于 SEO：
	有人说百度对Gzip的支持不够好，担心影响收录和SEO，经百度查阅相关资料后发现百度专门针对这个问题作过报告，声明百度是支持Gzip的。
	服务器开启gzip压缩是否会影响蜘蛛抓取和收录量?
	服务器开启gzip压缩，不会对spider抓取产生影响，我们会以压缩的方式来抓取。并且也能够节省站点的网络流量。

	See: http://www.tovi.top/nginx_zi_dong_qie_ge_fang_wen_ri_zhi/



